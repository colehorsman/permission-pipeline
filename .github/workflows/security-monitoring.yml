name: IAM Security Monitoring

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      mode:
        description: 'Monitoring mode'
        required: true
        default: 'pipeline'
        type: choice
        options:
        - pipeline
        - scheduled
      fail_on_threshold:
        description: 'Fail pipeline on threshold breach'
        required: false
        default: true
        type: boolean

jobs:
  security-check:
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read
      issues: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install pyyaml requests
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: us-east-1
    
    - name: Create monitoring config
      run: |
        cat > cicd_monitor_config.yaml << EOF
        thresholds:
          - metric_name: average_risk_score
            warning_threshold: 40.0
            critical_threshold: 60.0
            comparison: greater_than
            enabled: true
          - metric_name: critical_count
            warning_threshold: 1.0
            critical_threshold: 3.0
            comparison: greater_than
            enabled: true
          - metric_name: high_count
            warning_threshold: 5.0
            critical_threshold: 10.0
            comparison: greater_than
            enabled: true
        
        notifications:
          slack_webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          email_recipients: []
          teams_webhook: ${{ secrets.TEAMS_WEBHOOK_URL }}
        
        pipeline_integration:
          fail_on_critical: true
          fail_on_warning: false
          create_github_issue: true
          auto_remediation: false
          comprehensive_analysis: false
        
        monitoring:
          check_interval_hours: 24
          retention_days: 90
          trend_analysis_days: 30
        EOF
    
    - name: Run security monitoring
      id: security_check
      run: |
        MODE="${{ github.event.inputs.mode || 'pipeline' }}"
        FAIL_ON_THRESHOLD="${{ github.event.inputs.fail_on_threshold || 'true' }}"
        
        if [ "$MODE" = "pipeline" ]; then
          if [ "$FAIL_ON_THRESHOLD" = "true" ]; then
            python -m airiam.cicd.risk_monitor --mode pipeline --fail-on-threshold
          else
            python -m airiam.cicd.risk_monitor --mode pipeline
          fi
        else
          python -m airiam.cicd.risk_monitor --mode scheduled
        fi
      continue-on-error: true
    
    - name: Create GitHub Issue on Critical Findings
      if: failure() && github.event_name != 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Look for security issue files
          const files = fs.readdirSync('.');
          const issueFile = files.find(f => f.startsWith('security_issue_') && f.endsWith('.md'));
          
          if (issueFile) {
            const issueContent = fs.readFileSync(issueFile, 'utf8');
            const lines = issueContent.split('\n');
            const title = lines[0].replace('# ', '');
            const body = lines.slice(2).join('\n');
            
            // Check if similar issue already exists
            const { data: existingIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'security,iam,automated'
            });
            
            const similarIssue = existingIssues.find(issue => 
              issue.title.includes('Security Alert') && 
              issue.title.includes('Critical IAM Issues')
            );
            
            if (!similarIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['security', 'iam', 'critical', 'automated']
              });
            } else {
              // Update existing issue with new findings
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: similarIssue.number,
                body: `## üîÑ Updated Security Findings\n\n${body}`
              });
            }
          }
    
    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-reports-${{ github.run_number }}
        path: |
          pipeline_risk_reports/
          scheduled_reports_*/
          security_issue_*.md
          cicd_monitor_config.yaml
        retention-days: 30
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Look for CLI summary or create basic summary
          let summary = '## üõ°Ô∏è IAM Security Check Results\n\n';
          
          if (${{ steps.security_check.outcome == 'success' }}) {
            summary += '‚úÖ **Security check passed** - No critical issues detected\n\n';
          } else {
            summary += '‚ùå **Security check failed** - Critical issues require attention\n\n';
          }
          
          summary += `- **Workflow Run**: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
          summary += `- **Commit**: ${{ github.sha }}\n`;
          summary += `- **Check Type**: Pipeline Security Validation\n\n`;
          
          if (${{ steps.security_check.outcome != 'success' }}) {
            summary += '‚ö†Ô∏è Please review the security findings before merging this PR.\n';
            summary += 'Check the workflow logs and uploaded reports for detailed information.\n';
          }
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });